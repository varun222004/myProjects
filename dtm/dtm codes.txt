### **1. Controller (Remote Control for Drone)**

This is the basic remote control that will send movement commands to the drone. It will use the **nRF24L01+** module for communication.

```cpp
#include <SPI.h>
#include <RF24.h>

RF24 radio(9, 10);  // nRF24L01+ module (CE, CSN)
const byte address[6] = "00001";  // Unique address

void setup() {
  // Start serial communication for debugging
  Serial.begin(9600);

  // Initialize the nRF24L01+ radio
  radio.begin();
  radio.openWritingPipe(address);
  radio.setPALevel(RF24_PA_HIGH);

  Serial.println("Controller ready.");
}

void loop() {
  // Send commands based on user input
  if (Serial.available()) {
    char command = Serial.read();

    if (command == 'w') {
      radio.write("FWD", sizeof("FWD"));  // Send Forward command
      Serial.println("Sending: Forward");
    } else if (command == 's') {
      radio.write("BK", sizeof("BK"));  // Send Backward command
      Serial.println("Sending: Backward");
    } else if (command == 'a') {
      radio.write("LFT", sizeof("LFT"));  // Send Left command
      Serial.println("Sending: Left");
    } else if (command == 'd') {
      radio.write("RGT", sizeof("RGT"));  // Send Right command
      Serial.println("Sending: Right");
    } else if (command == 'u') {
      radio.write("UP", sizeof("UP"));  // Send Up command
      Serial.println("Sending: Up");
    } else if (command == 'j') {
      radio.write("DN", sizeof("DN"));  // Send Down command
      Serial.println("Sending: Down");
    }
  }
}
```

### **2. Drone (Receiver + Firmware Update)**

This Arduino will act as both the **drone** (responding to movement commands) and the **OTA firmware receiver** (receiving firmware updates over the air). It will be able to control motors for movement and accept firmware updates as needed.

```cpp
#include <SPI.h>
#include <RF24.h>
#include <Servo.h>  // Include the Servo library

// Servo motor objects
Servo servo1; // Servo for pitch control
Servo servo2; // Servo for yaw control
Servo servo3; // Servo for roll control
Servo servo4; // Servo for throttle or altitude control

// nRF24L01+ module (CE, CSN)
RF24 radio(9, 10); 
const byte address[6] = "00001";  // Unique address

// Variables for received commands and firmware storage
const int chunkSize = 32;  // Size of firmware chunks
byte firmwareBuffer[chunkSize];  // Buffer for firmware chunks
bool isFirmwareUpdate = false;  // Flag to check if it's a firmware update

void setup() {
  // Start serial communication for debugging
  Serial.begin(9600);

  // Initialize servo motors
  servo1.attach(3);  // Attach servo1 to pin 3
  servo2.attach(5);  // Attach servo2 to pin 5
  servo3.attach(6);  // Attach servo3 to pin 6
  servo4.attach(9);  // Attach servo4 to pin 9

  // Initialize nRF24L01+ radio
  radio.begin();
  radio.openReadingPipe(1, address);
  radio.setPALevel(RF24_PA_HIGH);
  radio.startListening();

  Serial.println("Drone ready.");
}

void loop() {
  if (radio.available()) {
    radio.read(firmwareBuffer, chunkSize);  // Read data

    // Check if it's a firmware chunk
    if (firmwareBuffer[0] == 'F' && firmwareBuffer[1] == 'W') {  
      // This indicates it's part of a firmware update (simple check based on the first two characters)
      isFirmwareUpdate = true;
      // Handle firmware update logic here (e.g., write to EEPROM or flash)
      Serial.println("Firmware update chunk received.");

      // Here we would store the firmware chunk in memory or an external device
      // For simplicity, just print out the chunk received:
      for (int i = 0; i < chunkSize; i++) {
        Serial.print(firmwareBuffer[i], HEX);
        Serial.print(" ");
      }
      Serial.println();
      delay(100);  // Give some time to process the chunk
    }
    else {
      // Handle regular movement commands (Forward, Backward, Left, Right, Up, Down)
      if (isFirmwareUpdate) {
        Serial.println("Firmware update in progress, ignoring movement commands.");
        return;
      }

      String receivedCommand = String((char*)firmwareBuffer);
      Serial.print("Received command: ");
      Serial.println(receivedCommand);

      // Process movement commands
      if (receivedCommand == "FWD") {
        moveForward();
      } else if (receivedCommand == "BK") {
        moveBackward();
      } else if (receivedCommand == "LFT") {
        turnLeft();
      } else if (receivedCommand == "RGT") {
        turnRight();
      } else if (receivedCommand == "UP") {
        ascend();
      } else if (receivedCommand == "DN") {
        descend();
      }
    }
  }
}

// Functions to control the drone's movements with servos
void moveForward() {
  servo1.write(90);  // Set the pitch (forward)
  servo2.write(90);  // Set yaw
  servo3.write(45);  // Set roll (left tilt)
  servo4.write(90);  // Set throttle
}

void moveBackward() {
  servo1.write(180);  // Set the pitch (backward)
  servo2.write(90);   // Set yaw
  servo3.write(135);  // Set roll (right tilt)
  servo4.write(90);   // Set throttle
}

void turnLeft() {
  servo1.write(90);  // Set pitch (neutral)
  servo2.write(45);  // Turn yaw left
  servo3.write(90);  // Set roll (neutral)
  servo4.write(90);  // Set throttle
}

void turnRight() {
  servo1.write(90);  // Set pitch (neutral)
  servo2.write(135); // Turn yaw right
  servo3.write(90);  // Set roll (neutral)
  servo4.write(90);  // Set throttle
}

void ascend() {
  servo1.write(90);  // Set pitch (neutral)
  servo2.write(90);  // Set yaw (neutral)
  servo3.write(90);  // Set roll (neutral)
  servo4.write(180); // Set throttle (maximum for ascent)
}

void descend() {
  servo1.write(90);  // Set pitch (neutral)
  servo2.write(90);  // Set yaw (neutral)
  servo3.write(90);  // Set roll (neutral)
  servo4.write(0);   // Set throttle (minimum for descent)
}
```

In this code:
- **Motor control functions** like `moveForward()`, `moveBackward()`, etc., are controlling the motors based on received movement commands.
- If the drone is in the middle of a firmware update (determined by checking the first two characters of the firmware chunk as `FWD`), it will ignore the movement commands and only process firmware data.

### **3. Firmware Update (Transmitter for Firmware Updates)**

This Arduino will send firmware updates to the **drone** via the **nRF24L01+** module. The firmware will be sent as data chunks.

```cpp
#include <SPI.h>
#include <SD.h>
#include <RF24.h>

RF24 radio(9, 10);  // nRF24L01+ module (CE, CSN)
const byte address[6] = "00001";  // Unique address

File firmwareFile;  // SD card file object
const int chunkSize = 32;  // Size of each firmware chunk

void setup() {
  // Start serial communication for debugging
  Serial.begin(9600);
  
  // Initialize nRF24L01+ radio
  radio.begin();
  radio.openWritingPipe(address);
  radio.setPALevel(RF24_PA_HIGH);

  // Initialize SD card
  if (!SD.begin(4)) {
    Serial.println("SD card initialization failed!");
    return;
  }

  // Open the firmware file
  firmwareFile = SD.open("firmware.bin");
  if (!firmwareFile) {
    Serial.println("Failed to open firmware file");
    return;
  }

  Serial.println("Starting firmware update transmission");
}

void loop() {
  if (firmwareFile.available()) {
    // Read a chunk of data from the firmware file
    byte firmwareChunk[chunkSize];
    int bytesRead = firmwareFile.read(firmwareChunk, chunkSize);

    // Send the chunk of data to the receiver (drone)
    radio.write(firmwareChunk, bytesRead);
    Serial.print("Sent chunk: ");
    Serial.println(bytesRead);
    delay(100);  // Delay to allow the receiver time to process

  } else {
    Serial.println("Firmware update complete.");
    firmwareFile.close();
    while (1);  // End transmission
  }
}
```

In this setup:
- **Firmware chunks** are read from the SD card, and each chunk is sent over the air to the drone (receiver).
- The **drone** stores the firmware

 and can process it (e.g., writing to EEPROM or flash).

---

### Final Remarks:
- **Controller** sends movement commands for the drone.
- **Drone** handles both movement control and firmware updates via OTA.
- **Firmware Update** sends firmware chunks to the drone to update its code.

For real-world applications, the drone would need additional error handling and validation for the firmware update process (like checksums and acknowledgments).